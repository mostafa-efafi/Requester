// Mocks generated by Mockito 5.3.2 from annotations
// in requester/test/core/rest/network_checker_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i3;

import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInternetAddressType_0 extends _i1.SmartFake
    implements _i2.InternetAddressType {
  _FakeInternetAddressType_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternetAddress_1 extends _i1.SmartFake
    implements _i2.InternetAddress {
  _FakeInternetAddress_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InternetAddress].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetAddress extends _i1.Mock implements _i2.InternetAddress {
  MockInternetAddress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InternetAddressType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _FakeInternetAddressType_0(
          this,
          Invocation.getter(#type),
        ),
      ) as _i2.InternetAddressType);
  @override
  String get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: '',
      ) as String);
  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: '',
      ) as String);
  @override
  _i3.Uint8List get rawAddress => (super.noSuchMethod(
        Invocation.getter(#rawAddress),
        returnValue: _i3.Uint8List(0),
      ) as _i3.Uint8List);
  @override
  bool get isLoopback => (super.noSuchMethod(
        Invocation.getter(#isLoopback),
        returnValue: false,
      ) as bool);
  @override
  bool get isLinkLocal => (super.noSuchMethod(
        Invocation.getter(#isLinkLocal),
        returnValue: false,
      ) as bool);
  @override
  bool get isMulticast => (super.noSuchMethod(
        Invocation.getter(#isMulticast),
        returnValue: false,
      ) as bool);
  @override
  _i4.Future<_i2.InternetAddress> reverse() => (super.noSuchMethod(
        Invocation.method(
          #reverse,
          [],
        ),
        returnValue:
            _i4.Future<_i2.InternetAddress>.value(_FakeInternetAddress_1(
          this,
          Invocation.method(
            #reverse,
            [],
          ),
        )),
      ) as _i4.Future<_i2.InternetAddress>);
}
